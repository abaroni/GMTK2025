/**
 * Level Definitions - Contains all level layout definitions
 */
export class LevelDefinitions {
    constructor(levelParser) {
        this.levelParser = levelParser;
        this.maxLevel = 3;
    }

    /**
     * Get the maximum number of levels
     * @returns {number} Maximum level number
     */
    getMaxLevel() {
        return this.maxLevel;
    }

    /**
     * Get a level definition by number
     * @param {number} levelNumber - Level number (1-based)
     * @returns {string} Level definition string
     */
    getLevel(levelNumber) {
        switch (levelNumber) {
            case 1:
                return this.getLevel1();
            case 2:
                return this.getLevel2();
            case 3:
                return this.getLevel3();
            default:
                console.warn(`Level ${levelNumber} not found, returning level 1`);
                return this.getLevel1();
        }
    }

    /**
     * Get all level definitions
     * @returns {Object} Object containing all level definitions
     */
    getAllLevels() {
        const levels = {};
        for (let i = 1; i <= this.maxLevel; i++) {
            levels[i] = this.getLevel(i);
        }
        return levels;
    }

    /**
     * Check if clones should be preserved when transitioning from one level to another
     * @param {number} fromLevel - The level we're transitioning from
     * @param {number} toLevel - The level we're transitioning to
     * @returns {boolean} True if clones should be preserved
     */
    shouldPreserveClones(fromLevel, toLevel) {
        // Define level pairs where clones should be preserved
        const preservePairs = [
            { from: 1, to: 2 }, // Preserve clones when going from level 1 to 2
            // Add more pairs here as needed, for example:
            // { from: 2, to: 3 }, // Preserve clones when going from level 2 to 3
        ];
        
        return preservePairs.some(pair => pair.from === fromLevel && pair.to === toLevel);
    }

    /**
     * Get level configuration metadata
     * @param {number} levelNumber - Level number
     * @returns {Object} Level configuration object
     */
    getLevelConfig(levelNumber) {
        const configs = {
            1: { name: "Tutorial", preserveClonesOnAdvance: true },
            2: { name: "Advanced Tutorial", preserveClonesOnAdvance: false },
            3: { name: "Challenge", preserveClonesOnAdvance: false }
        };
        
        return configs[levelNumber] || { name: "Unknown", preserveClonesOnAdvance: false };
    }

    /**
     * Get level 1 definition
     * @returns {string} Level 1 string
     */
    getLevel1() {
        return `
####################################
####################################
####################################
####################################
####################################
####################################
####################################
##########................##########
##########................##########
##########................##########
##########................##########
##########................##########
##########................##########
##########................##########
##########....C.####......##########
##########......####......##########
##########......####....C.##########
##########..P...####......##########
####################################
####################################
####################################
####################################
####################################
####################################
####################################
        `.trim();
    }
    getLevel2() {
        return `
####################################
####################################
####################################
####################################
####################################
####################################
####################################
##########................##########
##########..C.............##########
##########................##########
##########................##########
##########.......C........##########
##########................##########
##########................##########
##########......####......##########
##########......####......##########
##########......####......##########
##########......####....P.##########
####################################
####################################
####################################
####################################
####################################
####################################
####################################
        `.trim();
    }

    getLevel2_OLD() {
        return `
####################################
####################################
####################################
####################################
####################################
####################################
####################################
##########................##########
##########................##########
##########................##########
##########................##########
##########................##########
##########................##########
##########................##########
##########....C.####......##########
##########......####......##########
##########......####....C.##########
##########..P...####......##########
####################......##########
####################......##########
####################......##########
####################......##########
####################......##########
####################......##########
###############.C.........##########
###############...........##########
####################......##########
####################......##########
####################......##########
####################......##########
####################......##########
####################......##########
####################......##########
####################......##########
####################################
####################################
####################################
####################################
####################################
        `.trim();
    }

    /**
     * Get level 3 definition (uses default from LevelParser)
     * @returns {string} Level 3 string
     */
    getLevel3() {
       return `
########################################################################
########################################################################
########################################################################
########################################################################
########################################################################
########################################################################
########################################################################
##########................##########..........................##########
##########................##########..........................##########
##########................##########..........................##########
##########................##########..........................##########
##########................##########..........................##########
##########................##########..........................##########
##########................##########..........................##########
##########....C.####......##########..........................##########
##########......####......##########..........................##########
##########......####....C.##########..........................##########
##########..P...####......##########..........................##########
####################......##########..........................##########
####################......##########..........................##########
####################......##########..........................##########
####################......##########.................C........##########
####################......##########..........................##########
####################......##########..........................##########
###############.C.............................................##########
###############............................................C..##########
####################......##########..........................##########
####################......##########....................################
####################......##########....................################
####################......##########..........................##########
####################......##########..........................##########
####################......##########..........................##########
####################......##########......######..............##########
####################......##########......######..............##########
########################################################################
########################################################################
########################################################################
########################################################################
########################################################################
        `.trim();
    }
}
